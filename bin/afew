#!/usr/bin/env python
# coding=utf-8
from __future__ import print_function, absolute_import, unicode_literals

#
# Copyright (c) Justus Winter <4winter@informatik.uni-hamburg.de>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

import glob
import sys
import os
import time
import logging
import argparse
import collections

from afew.main import main
from afew.utils import filter_compat
from afew.Filter import all_filters
from afew.Settings import user_config_dir, get_filter_chain
from afew.Settings import get_mail_move_rules, get_mail_move_age
from afew.NotmuchSettings import read_notmuch_settings, get_notmuch_new_query

class HelpFormatter(argparse.ArgumentDefaultsHelpFormatter, argparse.RawDescriptionHelpFormatter): pass

parser = argparse.ArgumentParser(
    description='afew is a universal tagging solution for notmuch.',
    usage='%(prog)s <command> [options] <query modifier>|query...',
    formatter_class=HelpFormatter,
    add_help=False,
)

commands = collections.OrderedDict((
    ('tag', 'run the tag filters'),
    ('learn', 'train the category with the given query'),
    ('update', 'update the categories [*]'),
    ('update-reference', 'update the reference category (takes quite some time) [*]'),
    ('classify', 'classify each message matching the given query'),
    ('move-mails', 'move mail files between maildir folders [*]'),
))

command_help_format = '{:<%i} - {}' % max(len(command) for command in commands.keys())
commands_help = '\n'.join(command_help_format.format(k, v) for k, v in commands.items())
command_group = parser.add_argument_group(
    'Command',
    '''The available commands are as follows:

{}

The commands marked with [*] require no search query.
'''.format(commands_help))
command_group.add_argument('command', choices=commands, help=argparse.SUPPRESS)

# query modifiers
query_group = parser.add_argument_group(
    'Query modifiers',
    'Please specify either --all or --new or a query string.'
    ' The default query for the update commands is a random selection of'
    ' REFERENCE_SET_SIZE mails from the last REFERENCE_SET_TIMEFRAME days.'
)

query_modifier = query_group.add_mutually_exclusive_group()
query_modifier.add_argument('-a', '--all', action='store_true',
                            help='operate on all messages')
query_modifier.add_argument('-n', '--new', action='store_true',
                            help='operate on all new messages')
query_group.add_argument('--query', nargs='*')#, help=argparse.SUPPRESS)

options = parser.add_argument_group('Options')
# TODO: get config via notmuch api
options.add_argument(
    '-C', '--notmuch-config', default = None,
    help = 'path to the notmuch configuration file [default: $NOTMUCH_CONFIG or ~/.notmuch-config]'
)
options.add_argument(
    '-e', '--enable-filters',
    help = "filter classes to use, separated by ',' [default: filters specified in afew's config]"
)
options.add_argument(
    '-d', '--dry-run', default = False, action = 'store_true',
    help = "don't change the db [default: %(default)s]"
)
options.add_argument(
    '-R', '--reference-set-size', default = 1000,
    help = 'size of the reference set [default: %(default)s]'
)

options.add_argument(
    '-T', '--reference-set-timeframe', default = 30, metavar = 'DAYS',
    help = 'do not use mails older than DAYS days [default: %(default)s]'
)

options.add_argument('-h', '--help', action='help', help=argparse.SUPPRESS)
options.add_argument('-v', '--verbose', action='count',
                    help='be more verbose, can be given multiple times')

args = parser.parse_args()

if args.query and (args.new or args.all):
    parser.error('--new or --all not allowed with query string')

query_given = args.query or args.new or args.all
requires_no_query = args.command in {'update', 'update-reference', 'move-mails'}

if requires_no_query and query_given:
    parser.error('The command {} requires no query'.format(args.command))

if not requires_no_query and not query_given:
    parser.error('You need to specify one of --new, --all or a query string')

read_notmuch_settings(options.notmuch_config)

if options.new:
    query_string = get_notmuch_new_query()
elif options.all:
    query_string = ''
elif not (options.update or options.update_reference):
    query_string = ' '.join(args)
elif options.update or options.update_reference:
    query_string = '%i..%i' % (time.time() - options.reference_set_timeframe * 24 * 60 * 60, time.time())
else:
    sys.exit('Weird... please file a bug containing your command line.')

sys.path.insert(0, user_config_dir)
# py2.7 compat hack
glob_pattern = b'*.py' if sys.version_info[0] == 2 else '*.py'
for file_name in glob.glob1(user_config_dir,  glob_pattern):
    print('Importing user filter %r' % (file_name, ))
    __import__(file_name[:-3], 0)

configured_filter_chain = get_filter_chain()
if options.enable_filters:
    options.enable_filters = options.enable_filters.split(',')

    all_filters_set = set(all_filters.keys())
    enabled_filters_set = set(options.enable_filters)
    if not all_filters_set.issuperset(enabled_filters_set):
        sys.exit('Unknown filter(s) selected: %s' % (' '.join(enabled_filters_set.difference(all_filters_set))))

    options.enable_filters = [all_filters[filter_name]() for filter_name in options.enable_filters]
else:
    options.enable_filters = configured_filter_chain

if options.move_mails:
    options.mail_move_rules = get_mail_move_rules()
    options.mail_move_age = get_mail_move_age()

loglevel = {
    0: logging.WARNING,
    1: logging.INFO,
    2: logging.DEBUG,
}[min(2, options.verbosity)]
logging.basicConfig(level = loglevel)

main(options, query_string)
